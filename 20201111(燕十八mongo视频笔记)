[链接](https://www.php.cn/code/23770.html)

#### mongo
特征
内部执行引擎为JS解释器, 把文档存储成bson结构（磁盘的gridfs）,在查询时,转换为JS对象,并可以js语法来操作.
和redis和memcached的区别
redis和memcached是key-value数据库，mongodb是文档数据库
和传统数据库的区别
传统数据库是结构化的数据，每一行的数据必须和表结构一致
Mongo是文档型数据库，每个文档的属性和值都可以不同

#### 命令
##### 数据库备份
> mongodump -h dbhost -d dbname -o 
> 参数说明：
> -h： MongDB所在服务器地址，例如：127.0.0.1，当然也可以指定端口号：127.0.0.1:27017
> -d： 需要备份的数据库实例，例如：test
> -o： 备份的数据存放位置，例如：/home/mongodump/，当然该目录需要提前建立，这个目录里面存放该数据库实例的备份数据。
##### 数据库恢复
> mongorestore -h dbhost -d dbname --dir dbdirectory
> 参数或名：
> -h： MongoDB所在服务器地址
> -d： 需要恢复的数据库实例，例如：test，当然这个名称也可以和备份时候的不一样，比如test2
> --dir： 备份数据所在位置，例如：/home/mongodump/itcast/
> --drop： 恢复的时候，先删除当前数据，然后恢复备份的数据。就是说，恢复后，备份后添加修改的数据都会被删除，慎用！
##### 单文档导出
> mongoexport -d dbname -c collectionname -o file --type json/csv -f field
> 参数说明：
> -d ：数据库名
> -c ：collection名
> -o ：输出的文件名
> --type ： 输出的格式，默认为json
> -f ：输出的字段，如果-type为csv，则需要加上-f "字段名"
##### 单文档导入
> mongoimport -d dbname -c collectionname --file filename --headerline --type json/csv -f field
> 参数说明：
> -d ：数据库名
> -c ：collection名
> --type ：导入的格式默认json
> -f ：导入的字段名
> --headerline ：如果导入的格式是csv，则可以使用第一行的标题作为导入的字段
> --file ：要导入的文件
##### 启动数据库
> ./bin/mongod --dbpath /path/to/database --logpath /path/to/log --fork --port 27017
> 参数解释:
> --dbpath 数据存储目录
> --logpath 日志存储目录
> --port 运行端口(默认27017)
> --fork 后台进程运行

#### 数据库操作命令
##### 数据库和文档操作
> show dbs/databases 查看数据库
> use dbname 切换数据库
> show tables/collections 查看文档
> 不能显式创建数据库，使用use dbname,然后创建文档，可以默认创建数据库
> db.createCollection('collectionName') 创建文档
> db.collectionName.insert({}) 插入记录
> db.collectionName.drop() 删除文档
> db.dropDatabase() 删除数据库
##### curd操作
> db.collectionName.insert({});db.collectionName.insert([{}, {}])
> db.collection.remove(<query>, <justOne>) justOne : （可选）如果设为 true 或 1，则只删除一个文档,默认为false
> db.collection.update(<query>, <update>, 
>	{
>     upsert: <boolean>, 如果不存在update的记录，是否插入objNew,true为插入，默认是false
>     multi: <boolean>, 只更新找到的第一条记录
>     writeConcern: <document> 异常等级
>   }
> )
> db.collection.save(<document>),判断document中的_id是否存在，存在则替换
##### <update>
```
{
	"$currentDate": {
        "lastModified": True, // 更新lastModified字段为当前日期
        "lastModified": "timestamp", // 更新lastModified字段为当前时间戳
        "lastModified": "date", // 更新lastModified字段为当前日期
    },
    "$inc": { // 原子性操作，对null值操作会报错
    	"quantity": -2, // quantity - 2
    	"metrics.orders": 1 // metrics.orders + 1
    },
    "$min": { "lowScore": 150 }, // 如果lowScore大于150，则把lowScore更新成150
    "$max": { "highScore": 950 },  // 如果highScore小于950，则把highScore更新成950
    "$mul": { "price": 1.25, qty: 2 }, // price乘以1.25，qty乘以2，单个文档里是原子操作
    "rename": { "nmae": "name" }, // 列重命名
	"$set": { "details.make": "zzz" }, // 更新单个值，如果不限制会更新整个文档
	"$setOnInsert": { "defaultQty": 100 }, 如果下面的语句执行了插入操作，defaultQty=100
	// db.products.update({ _id: 1 },{$set: { item: "apple" },$setOnInsert: { defaultQty: 100 }},{ upsert: true })}
	"$unset": { "quantity": "", "instock": "" }, // 删除quantity和instock列
	"$addToSet": { "tags": "accessories" }, // 将accessories添加到tags中
	"$pop": { "scores": -1/1 }, // 从scores删除最小/最大值
	"$pull": { fruits: { $in: [ "apples", "oranges" ] }, vegetables: "carrots" }, // 从数组中删除指定元素
	"push": { "scores": { $each: [ 90, 92, 85 ] } }, // 和pop相反
	"$pullAll": { scores: [ 0, 5 ] }, // 相当于push+in

$ 确定数组中一个要被更新的元素的位置
eg1:
db.students.insert([
   { "_id" : 1, "grades" : [ 85, 80, 80 ] },
   { "_id" : 2, "grades" : [ 88, 90, 92 ] },
   { "_id" : 3, "grades" : [ 85, 100, 90 ] }
])
db.students.updateOne(
   { _id: 1, grades: 80 },
   { $set: { "grades.$" : 82 } }
)
eg2:
{
  _id: 4,
  grades: [
     { grade: 80, mean: 75, std: 8 },
     { grade: 85, mean: 90, std: 5 },
     { grade: 85, mean: 85, std: 8 }
  ]
}
db.students.updateOne(
   { _id: 4, "grades.grade": 85 },
   { $set: { "grades.$.std" : 6 } }
)
{
   "_id" : 4,
   "grades" : [
      { "grade" : 80, "mean" : 75, "std" : 8 },
      { "grade" : 85, "mean" : 90, "std" : 6 },
      { "grade" : 85, "mean" : 85, "std" : 8 } // 只会匹配第一个grade值为85的文档
   ]
}

$[] 
eg:
$inc: { "grades.$[]": 10 } // 将grades数组中的值加10

sort
1. db.COLLECTION_NAME.find().sort({KEY:1})

multi:true 
默认只更新一行，multi:true 更新多行

#### query
$eq =
$gt >
$gte >=
$lt <
$lte <=
$in in []
$ne !=
$nin not in []
$and
$not 
$nor  所有条件都不满足
$or
$exist a: { $exists: true } // a字段存在
$expr $expr: { $gt: [ "$spent" , "$budget" ] } spent列大于budget列的文档
$mod $mod: [ 4, 0 ] 跟4取模等于0的数据
$text $text: { $search: "coffee" }
$regex 正则匹配
$all 匹配所有
$elemMatch results: { $elemMatch: { $gte: 80, $lt: 85 } }
$size 查询某个array的长度等于某值时，我们可以简单的使用$size 操作符

```













